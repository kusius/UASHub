package io.github.kusius.klvmp

/**
 * Represents a UAS dataset information frame as received from a set of KLV elements
 * in a STANAG 4609 MPEG-TS stream.
 *
 * The dataset described is according to MISB 0601.
 * Some composite fields are missing. Once klv.h library
 * is updated we will wrap them here as well to be exposed.
 */
data class UASDataset(
    val checkSum: Int?,
    val unixTimeStamp: Long?,
    val missionID: String?,
    val platformTailNumber: String?,
    val platformHeadingAngle: Float?,
    val platformPitchAngle: Float?,
    val platformRollAngle: Float?,
    val platformTrueAirspeed: Int?,
    val platformIndicatedAirspeed: Int?,
    val platformDesignation: String?,
    val imageSourceSensor: String?,
    val imageCoordinateSystem: String?,
    val sensorLatitude: Double?,
    val sensorLongitude: Double?,
    val sensorTrueAltitude: Float?,
    val sensorHorizontalFieldOfView: Float?,
    val sensorVerticalFieldOfView: Float?,
    val sensorRelativeAzimuthAngle: Double?,
    val sensorRelativeElevationAngle: Double?,
    val sensorRelativeRollAngle: Double?,
    val slantRange: Double?,
    val targetWidth: Double?,
    val frameCenterLatitude: Double?,
    val frameCenterLongitude: Double?,
    val frameCenterElevation: Float?,
    val offsetCornerLatitudePoint1: Float?,
    val offsetCornerLongitudePoint1: Float?,
    val offsetCornerLatitudePoint2: Float?,
    val offsetCornerLongitudePoint2: Float?,
    val offsetCornerLatitudePoint3: Float?,
    val offsetCornerLongitudePoint3: Float?,
    val offsetCornerLatitudePoint4: Float?,
    val offsetCornerLongitudePoint4: Float?,
    val icingDetected: Boolean?,
    val windDirection: Float?,
    val windSpeed: Float?,
    val staticPressure: Float?,
    val densityAltitude: Float?,
    val outsideAirTemperature: Int?,
    val targetLocationLatitude: Double?,
    val targetLocationLongitude: Double?,
    val targetLocationElevation: Float?,
    val targetTrackGateWidth: Int?,
    val targetTrackGateHeight: Int?,
    val targetErrorEstimateC90: Float?,
    val targetErrorEstimateLE90: Float?,
    val genericFlagData: Int?,
    val securityLocalSet: Nothing?,
    val differentialPressure: Float?, // here
    val platformAngleOfAttack: Float?,
    val platformVerticalSpeed: Float?,
    val platformSideslipAngle: Float?,
    val airfieldBarometricPressure: Float?,
    val airfieldElevation: Float?,
    val relativeHumidity: Float?,
    val platformGroundSpeed: Int?,
    val groundRange: Double?,
    val platformFuelRemaining: Float?,
    val platformCallsign: String?,
    val weaponLoad: Int?,
    val weaponFired: Int?,
    val laserPRFCode: Int?,
    val sensorFieldOfViewName: Int?,
    val platformMagneticHeading: Float?,
    val uasDatalinkLSVersionNumber: Int?,
    // item 66 is deprecated, it is purposely missing
    val alternatePlatformLatitude: Double?,
    val alternatePlatformLongitude: Double?,
    val alternatePlatformAltitude: Float?,
    val alternatePlatformName: String?,
    val alternatePlatformHeading: Float?,
    val eventStartTimeUTC: Long?,
    val rvtLocalDataset: Nothing?,
    val vmtLocalDataset: Nothing?,
    val sensorEllipsoidHeight: Float?,
    val alternatePlatformEllipsoidHeight: Float?,
    val operationalMode: Int?,
    val frameCenterHeightAboveEllipsoid: Float?,
    val sensorNorthVelocity: Float?,
    val sensorEastVelocity: Float?,
    val imageHorizonPixelPack: Nothing?,
    val cornerLatitudePoint1Full: Double?,
    val cornerLongitudePoint1Full: Double?,
    val cornerLatitudePoint2Full: Double?,
    val cornerLongitudePoint2Full: Double?,
    val cornerLatitudePoint3Full: Double?,
    val cornerLongitudePoint3Full: Double?,
    val cornerLatitudePoint4Full: Double?,
    val cornerLongitudePoint4Full: Double?,
    val platformPitchAngleFull: Double?,
    val platformRollAngleFull: Double?,
    val platformAngleOfAttackFull: Double?,
    val platformSideSlipAngleFull: Double?,
    val miisCoreIdentifier: Nothing?,
    val sarMotionImageryMetadata: Nothing?,
    val targetWidthExtended: Double?,
    val rangeImageLocalSet: Nothing?,
    val geoRegistrationLocalSet: Nothing?,
    val compositeImagingLocalSet: Nothing?,
    val segmentLocalSet: Nothing?,
    val amendLocalSet: Nothing?,
    val klvsdccflp: Nothing?,
    val densityAltitudeExtended: Double?,
    val densityEllipsoidHeightExtended: Double?,
    val alternatePlatformEllipsoidHeightExtended: Double?,
    val streamDesignator: String?,
    val operationalBase: String?,
    val broadcastSource: String?,
    val rangeTORecoveryLocation: Float?,
    val timeAirborne: Int?,
    val propulsionUnitSpeed: Int?,
    val platformCourseAngle: Float?,
    val altitudeAGL: Float?,
    val radarAltimeter: Float?,
    val controlCommand: Nothing?,
    val controlCommandVerificationList: Nothing?,
    val sensorAzimuthRate: Float?,
    val sensorElevationRate: Float?,
    val sensorRollRate: Float?,
    val onboardMISStoragePercentFull: Float?,
    val activeWaveLength: Nothing?,
    val countryCodes: Nothing?,
    val numberOfNavSatInView: Int?,
    val positionMethodSource: Int?,
    val platformStatus: Int?,
    val sensorControlMode: Int?,
    val sensorFrameRatePack: Nothing?,
    val wavelengthsList: Nothing?,
    val targetID: String?,
    val airbaseLocations: Nothing?,
    val takeoffTime: Long?,
    val transmissionFrequency: Float?,
    val onboardMISStorageCapacity: Int?,
    val zoomPercentage: Float?,
    val communicationsMethod: String?,
    val leapSeconds: Int?,
    val correctionOffset: Int?,
    val payloadList: Nothing?,
    val activePayloads: Nothing?,
    val weaponStores: Nothing?,
    val waypointList: Nothing?,
) {
    internal companion object {
        internal fun fromKLVSet(klvElements: List<KLVElement>): UASDataset {
            val valueMap = klvElements.associate { it.key to it.value }

            val dataset = UASDataset(
                checkSum = valueMap[1]?.toIntValue(),
                unixTimeStamp = valueMap[2]?.toLongValue(),
                missionID = valueMap[3]?.toStringValue(),
                platformTailNumber = valueMap[4]?.toStringValue(),
                platformHeadingAngle = valueMap[5]?.toFloatValue(),
                platformPitchAngle = valueMap[6]?.toFloatValue(),
                platformRollAngle = valueMap[7]?.toFloatValue(),
                platformTrueAirspeed = valueMap[8]?.toIntValue(),
                platformIndicatedAirspeed = valueMap[9]?.toIntValue(),
                platformDesignation = valueMap[10]?.toStringValue(),
                imageSourceSensor = valueMap[11]?.toStringValue(),
                imageCoordinateSystem = valueMap[12]?.toStringValue(),
                sensorLatitude = valueMap[13]?.toDoubleValue(),
                sensorLongitude = valueMap[14]?.toDoubleValue(),
                sensorTrueAltitude = valueMap[15]?.toFloatValue(),
                sensorHorizontalFieldOfView = valueMap[16]?.toFloatValue(),
                sensorVerticalFieldOfView = valueMap[17]?.toFloatValue(),
                sensorRelativeAzimuthAngle = valueMap[18]?.toDoubleValue(),
                sensorRelativeElevationAngle = valueMap[19]?.toDoubleValue(),
                sensorRelativeRollAngle = valueMap[20]?.toDoubleValue(),
                slantRange = valueMap[21]?.toDoubleValue(),
                targetWidth = valueMap[22]?.toDoubleValue(),
                frameCenterLatitude = valueMap[23]?.toDoubleValue(),
                frameCenterLongitude = valueMap[24]?.toDoubleValue(),
                frameCenterElevation = valueMap[25]?.toFloatValue(),
                offsetCornerLatitudePoint1 = valueMap[26]?.toFloatValue(),
                offsetCornerLongitudePoint1 = valueMap[27]?.toFloatValue(),
                offsetCornerLatitudePoint2 = valueMap[28]?.toFloatValue(),
                offsetCornerLongitudePoint2 = valueMap[29]?.toFloatValue(),
                offsetCornerLatitudePoint3 = valueMap[30]?.toFloatValue(),
                offsetCornerLongitudePoint3 = valueMap[31]?.toFloatValue(),
                offsetCornerLatitudePoint4 = valueMap[32]?.toFloatValue(),
                offsetCornerLongitudePoint4 = valueMap[33]?.toFloatValue(),
                icingDetected = valueMap[34]?.toBoolean(),
                windDirection = valueMap[35]?.toFloatValue(),
                windSpeed = valueMap[36]?.toFloatValue(),
                staticPressure = valueMap[37]?.toFloatValue(),
                densityAltitude = valueMap[38]?.toFloatValue(),
                outsideAirTemperature = valueMap[39]?.toIntValue(),
                targetLocationLatitude = valueMap[40]?.toDoubleValue(),
                targetLocationLongitude = valueMap[41]?.toDoubleValue(),
                targetLocationElevation = valueMap[42]?.toFloatValue(),
                targetTrackGateWidth = valueMap[43]?.toIntValue(),
                targetTrackGateHeight = valueMap[44]?.toIntValue(),
                targetErrorEstimateC90 = valueMap[45]?.toFloatValue(),
                targetErrorEstimateLE90 = valueMap[46]?.toFloatValue(),
                genericFlagData = valueMap[47]?.toIntValue(),
                securityLocalSet = null,
                differentialPressure = valueMap[49]?.toFloatValue(),
                platformAngleOfAttack = valueMap[50]?.toFloatValue(),
                platformVerticalSpeed = valueMap[51]?.toFloatValue(),
                platformSideslipAngle = valueMap[52]?.toFloatValue(),
                airfieldBarometricPressure = valueMap[53]?.toFloatValue(),
                airfieldElevation = valueMap[54]?.toFloatValue(),
                relativeHumidity = valueMap[55]?.toFloatValue(),
                platformGroundSpeed = valueMap[56]?.toIntValue(),
                groundRange = valueMap[57]?.toDoubleValue(),
                platformFuelRemaining = valueMap[58]?.toFloatValue(),
                platformCallsign = valueMap[59]?.toStringValue(),
                weaponLoad = valueMap[60]?.toIntValue(),
                weaponFired = valueMap[61]?.toIntValue(),
                laserPRFCode = valueMap[62]?.toIntValue(),
                sensorFieldOfViewName = valueMap[63]?.toIntValue(),
                platformMagneticHeading = valueMap[64]?.toFloatValue(),
                uasDatalinkLSVersionNumber = valueMap[65]?.toIntValue(),
                // skip 66
                alternatePlatformLatitude = valueMap[67]?.toDoubleValue(),
                alternatePlatformLongitude = valueMap[68]?.toDoubleValue(),
                alternatePlatformAltitude = valueMap[69]?.toFloatValue(),
                alternatePlatformName = valueMap[70]?.toStringValue(),
                alternatePlatformHeading = valueMap[71]?.toFloatValue(),
                eventStartTimeUTC = valueMap[72]?.toLongValue(),
                rvtLocalDataset = null,
                vmtLocalDataset = null,
                sensorEllipsoidHeight = valueMap[75]?.toFloatValue(),
                alternatePlatformEllipsoidHeight = valueMap[76]?.toFloatValue(),
                operationalMode = valueMap[77]?.toIntValue(),
                frameCenterHeightAboveEllipsoid = valueMap[78]?.toFloatValue(),
                sensorNorthVelocity = valueMap[79]?.toFloatValue(),
                sensorEastVelocity = valueMap[80]?.toFloatValue(),
                imageHorizonPixelPack = null,
                cornerLatitudePoint1Full = valueMap[82]?.toDoubleValue(),
                cornerLongitudePoint1Full = valueMap[83]?.toDoubleValue(),
                cornerLatitudePoint2Full = valueMap[84]?.toDoubleValue(),
                cornerLongitudePoint2Full = valueMap[85]?.toDoubleValue(),
                cornerLatitudePoint3Full = valueMap[86]?.toDoubleValue(),
                cornerLongitudePoint3Full = valueMap[87]?.toDoubleValue(),
                cornerLatitudePoint4Full = valueMap[88]?.toDoubleValue(),
                cornerLongitudePoint4Full = valueMap[89]?.toDoubleValue(),
                platformPitchAngleFull = valueMap[90]?.toDoubleValue(),
                platformRollAngleFull = valueMap[91]?.toDoubleValue(),
                platformAngleOfAttackFull = valueMap[92]?.toDoubleValue(),
                platformSideSlipAngleFull = valueMap[93]?.toDoubleValue(),
                miisCoreIdentifier = null,
                sarMotionImageryMetadata = null,
                targetWidthExtended = valueMap[96]?.toDoubleValue(),
                rangeImageLocalSet = null,
                geoRegistrationLocalSet = null,
                compositeImagingLocalSet = null,
                segmentLocalSet = null,
                amendLocalSet = null,
                klvsdccflp = null,
                densityAltitudeExtended = valueMap[103]?.toDoubleValue(),
                densityEllipsoidHeightExtended = valueMap[104]?.toDoubleValue(),
                alternatePlatformEllipsoidHeightExtended = valueMap[105]?.toDoubleValue(),
                streamDesignator = valueMap[106]?.toStringValue(),
                operationalBase = valueMap[107]?.toStringValue(),
                broadcastSource = valueMap[108]?.toStringValue(),
                rangeTORecoveryLocation = valueMap[109]?.toFloatValue(),
                timeAirborne = valueMap[110]?.toIntValue(),
                propulsionUnitSpeed = valueMap[111]?.toIntValue(),
                platformCourseAngle = valueMap[112]?.toFloatValue(),
                altitudeAGL = valueMap[113]?.toFloatValue(),
                radarAltimeter = valueMap[114]?.toFloatValue(),
                controlCommand = null,
                controlCommandVerificationList = null,
                sensorAzimuthRate = valueMap[117]?.toFloatValue(),
                sensorElevationRate = valueMap[118]?.toFloatValue(),
                sensorRollRate = valueMap[119]?.toFloatValue(),
                onboardMISStoragePercentFull = valueMap[120]?.toFloatValue(),
                activeWaveLength = null,
                countryCodes = null,
                numberOfNavSatInView = valueMap[123]?.toIntValue(),
                positionMethodSource = valueMap[124]?.toIntValue(),
                platformStatus = valueMap[125]?.toIntValue(),
                sensorControlMode = valueMap[126]?.toIntValue(),
                sensorFrameRatePack = null,
                wavelengthsList = null,
                targetID = valueMap[129]?.toStringValue(),
                airbaseLocations = null,
                takeoffTime = valueMap[131]?.toLongValue(),
                transmissionFrequency = valueMap[132]?.toFloatValue(),
                onboardMISStorageCapacity = valueMap[133]?.toIntValue(),
                zoomPercentage = valueMap[134]?.toFloatValue(),
                communicationsMethod = valueMap[135]?.toStringValue(),
                leapSeconds = valueMap[136]?.toIntValue(),
                correctionOffset = valueMap[137]?.toIntValue(),
                payloadList = null,
                activePayloads = null,
                weaponStores = null,
                waypointList = null
            )
            return dataset

        }
    }
}